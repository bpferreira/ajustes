name: Ajustes Di√°rio (debug)

on:
  workflow_dispatch:

permissions:
  contents: write

defaults:
  run:
    shell: bash

jobs:
  baixar-ajustes:
    runs-on: ubuntu-latest
    container:
      image: bpferreira/ajustes:v1

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: Fix Git ownership (system-level safe.directory)
        working-directory: /
        run: |
          git config --system --add safe.directory '*'
          git config --system --add safe.directory "$GITHUB_WORKSPACE"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name  "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Echo env e diret√≥rios
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "PWD (bash)="; pwd
          echo "Listando raiz do repo:"; ls -la
          echo "R getwd():"; Rscript -e 'cat(getwd(), "\n")'

      - name: Garantir pastas de sa√≠da
        run: |
          mkdir -p data/ajustes/b3
          mkdir -p data/ajustes/anbima
          ls -la data/ajustes || true

      # Instalar pacotes m√≠nimos para convers√£o CSV -> XLSX no pr√≥prio workflow
      - name: Instalar pacotes para convers√£o (writexl, readr)
        run: |
          Rscript -e 'pkgs <- c("writexl","readr"); \
                      ins <- setdiff(pkgs, rownames(installed.packages())); \
                      if(length(ins)) install.packages(ins, repos="https://cloud.r-project.org")'

      - name: Rodar baixar_b3.R (for√ßando wd)
        run: |
          echo "R getwd() antes do script:"; Rscript -e 'cat(getwd(), "\n")'
          Rscript -e 'setwd(Sys.getenv("GITHUB_WORKSPACE")); source("R/baixar_b3.R")'
          echo "üìÇ Ap√≥s baixar_b3.R, conte√∫do data/ajustes/b3:"; ls -la data/ajustes/b3 || true
          test -n "$(ls -1 data/ajustes/b3/*.csv 2>/dev/null)" || (echo "‚ùå CSV da B3 n√£o gerado" && exit 1)

      - name: Rodar baixar_anbima.R (for√ßando wd)
        run: |
          echo "R getwd() antes do script:"; Rscript -e 'cat(getwd(), "\n")'
          Rscript -e 'setwd(Sys.getenv("GITHUB_WORKSPACE")); source("R/baixar_anbima.R")'
          echo "üìÇ Ap√≥s baixar_anbima.R, conte√∫do data/ajustes/anbima:"; ls -la data/ajustes/anbima || true
          test -n "$(ls -1 data/ajustes/anbima/*.csv 2>/dev/null)" || (echo "‚ùå CSV da ANBIMA n√£o gerado" && exit 1)

      # üëá CONVERS√ÉO UNIVERSAL: transforma todos CSVs em XLSX (mant√©m nome base)
      - name: Converter todos CSVs para XLSX (fallback)
        run: |
          Rscript -e 'suppressPackageStartupMessages({library(writexl); library(readr)}) ; \
                      csvs <- list.files("data/ajustes", pattern="\\.csv$", recursive=TRUE, full.names=TRUE); \
                      if(length(csvs)==0) { cat("‚ö†Ô∏è Nenhum CSV encontrado para converter\n"); quit(status=0) } ; \
                      for (f in csvs) { \
                        # tenta ler como pt-BR; se falhar, tenta padr√£o
                        ok <- FALSE ; df <- NULL ; \
                        try({ df <- read.csv2(f, check.names=FALSE); ok <- TRUE }, silent=TRUE); \
                        if(!ok) try({ df <- readr::read_csv(f, show_col_types=FALSE) ; ok <- TRUE }, silent=TRUE) ; \
                        if(!ok || is.null(df)) { cat("‚ùå Falha ao ler CSV:", f, "\n"); next } ; \
                        out <- sub("\\\\.csv$", ".xlsx", f, ignore.case=TRUE) ; \
                        writexl::write_xlsx(df, out) ; \
                        cat("‚úÖ XLSX criado:", out, "exists=", file.exists(out), "\n") \
                      }'
          echo "üìÇ Verificando XLSX gerados:"
          find data/ajustes -type f -name "*.xlsx" -printf '%p\n' | sort || true
          test -n "$(find data/ajustes -type f -name "*.xlsx" -print -quit)" || (echo "‚ùå Nenhum XLSX gerado a partir dos CSVs" && exit 1)

      - name: Varredura ‚Äî procurar arquivos gerados no workspace
        run: |
          echo "üîé Procurando .csv/.xls/.xlsx no workspace..."
          find "$GITHUB_WORKSPACE" -type f \( -name "*.csv" -o -name "*.xls" -o -name "*.xlsx" \) -printf '%TY-%Tm-%Td %TT %p\n' | sort || true

      - name: Status do repo (antes do commit)
        run: git status

      - name: Commit e push dos arquivos atualizados
        run: |
          echo "üìù Preparando commit..."
          git add -f data/ajustes/**/*.csv data/ajustes/**/*.xlsx data/ajustes/**/*.xls || true
          git status
          git commit -m "Atualizar ajustes B3/ANBIMA - $(date '+%Y-%m-%d %H:%M:%S')" || echo "Nenhuma mudan√ßa para commit"
          git push || echo "Nenhuma mudan√ßa para push"
